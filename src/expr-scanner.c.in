#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "expr-scanner.h"

static char *scan(const char *p, Node *n)
{
    static char scratch[256];
    char *orig = p;
    char *YYMARKER = NULL;

    /*!re2c
            re2c:define:YYCTYPE  = "unsigned char";
            re2c:define:YYCURSOR = p;
            re2c:yyfill:enable   = 0;
            re2c:yych:conversion = 1;
            re2c:indent:top      = 1;
            [ ]+            {n->sym = WHITESPACE; return p;}
            "x"             {n->sym = IDENT_X; return p;}
            "y"             {n->sym = IDENT_Y; return p;}
            "+"             {n->sym = OP_ADD; return p;}
            "-"             {n->sym = OP_SUB; return p;}
            "*"             {n->sym = OP_MUL; return p;}
            "/"             {n->sym = OP_DIV; return p;}
            "("             {n->sym = LPAREN; return p;}
            ")"             {n->sym = RPAREN; return p;}
            [A-Za-z]+       {n->sym = FUNC; n->value.s = strndup(orig, p-orig); return p;}
            [0-9]+"."[0-9]+ {n->sym = FLOAT; strncpy(scratch, orig, p-orig); scratch[p-orig+1] = 0; n->value.f = atof(scratch); return p;}
            [0-9]+          {n->sym = INTEGER; strncpy(scratch, orig, p-orig); n->value.i = atoi(scratch); return p;}
            "\000"          {return (char*)0;}
    */
}

Node *tokenize_expression(const char *input)
{
    size_t total_nodes = 256;
    size_t num_nodes = 0;
    Node *nodes = (Node *) malloc(sizeof(Node) * total_nodes);
    Node *current_node = nodes;
    char *p = scan(input, current_node);

    while (p != NULL) {
        if (current_node->sym != WHITESPACE) {
            num_nodes++;
            current_node++;
        }

        if (num_nodes == total_nodes) {
            total_nodes += 256; 
            nodes = realloc(nodes, total_nodes);
        }

        p = scan(p, current_node);
    }

    current_node->sym = END;
    return nodes;
}

